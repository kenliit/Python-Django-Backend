"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from django.contrib import admin


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j4kkft-6_jeo#ykkb#e$-uk&hk@^+1jnjg=#zy*5aqmkhqdvog'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'things2you.com', 'c-techs.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    "rest_framework.authtoken",
    'phonenumber_field',
    'events',
    'users',
    'logs',
    'locations',
    'rating',
    'business',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'custom_functions.timezone.TimezoneMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if not DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'Things2You',
            'USER': 'things2u',
            'PASSWORD': 'Holy9Bible!',
            'HOST': '127.0.0.1',
            'PORT': '3306',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'Things2You',
            'USER': 'things2u',
            'PASSWORD': 'Holy9Bible!',
            'HOST': 'www.things2you.com',
            'PORT': '3306',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

AUTH_USER_MODEL = 'users.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.normpath(os.path.join(BASE_DIR, "static")),
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Base url to serve media files
MEDIA_URL = '/media/'

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Size of Pictures
BANNER_SIZE = 600, 300
AVATAR_SIZE = 300, 300

# Email Settings
DEFAULT_FROM_EMAIL = 'webmaster@c-techs.com'

if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST_USER = "webmaster@c-techs.com"
    EMAIL_HOST = 'hwsmtp.exmail.qq.com'
    EMAIL_USE_SSL = True
    EMAIL_PORT = 465
    EMAIL_HOST_PASSWORD = "Samsung2021"

else:
    EMAIL_BACKEND = (
        "django.core.mail.backends.console.EmailBackend"
    )

# Base URL
if not DEBUG:
    BASE_URL = "http://www.things2you.com/"
else:
    BASE_URL = "http://127.0.0.1:3000/"


# Creating a sort function
def get_app_list(self, request):
    """
    Return a sorted list of all the installed apps that have been
    registered in this site.
    """
    app_ordering = {
        'Auth Token': 1,
        'Authentication and Authorization': 2,
        'Users': 3,
        'Events': 4,
        "Rating": 5,
        "Logs": 6,
    }

    in_app_ordering = {
        # for superuser
        'Group': 1,
        'CustomUser': 2,
        'TokenProxy': 3,
        'VerificationCode': 4,

        # app events
        'Event': 101,
        'EventThumb': 102,
        'EventComment': 103,
        'AdditionalInfo': 104,

        # app rating
        'ImageOrVideo': 202,
        'Comment': 201,
        'CommentThumb': 203,

        # app logs
        'UserLog': 301,
    }
    app_dict = self._build_app_dict(request)
    app_list = sorted(
        app_dict.values(),
        key=lambda x: app_ordering[x['name']]
    )

    # print(app_dict.values())

    for app in app_list:
        app['models'].sort(key=lambda x: in_app_ordering[x['object_name']])

    return app_list


admin.AdminSite.get_app_list = get_app_list

